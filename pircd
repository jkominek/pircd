#!/usr/bin/perl
# 
# pircd
# Created: Mon Sep 14 12:55:01 1998 by jay.kominek@colorado.edu
# Revised: Fri Apr 13 22:14:38 2001 by jay.kominek@colorado.edu
# Copyright 1998 Jay F. Kominek (jay.kominek@colorado.edu)
# 
# Consult the file 'LICENSE' for the complete terms under which you
# may use this file.
#
#####################################################################
# The Perl Internet Relay Chat Daemon
#####################################################################

use strict; # keeps me honest. :)

# Various what-not that we need to get things done.
use POSIX;
use IO::Socket;
use IO::Select;
use Fcntl;
use Tie::RefHash;
use UNIVERSAL qw(isa);

# pircd-specific modules
use Utils;
use Connection;
use User;
use Server;
use LocalServer;
use Channel;

$| = 1;

# We need to be able to use references as the keys to these
#  hashes so that we can iterate over them by their keys, and
#  use the iterative value as the $client object without
#  things breaking.
my %connections = ();
my %unfinished  = ();
my %serversocks = ();
tie %connections, 'Tie::RefHash';
tie %unfinished,  'Tie::RefHash';
tie %serversocks, 'Tie::RefHash';
my $port        = 6667;
my $sslport     = 36900;
my $ssl         = 0;
my $backlog     = 10;
my $daemon      = 0;
my $conf        = "server.conf";
my $logfile     = "/var/log/pircd";

# Parse the command line
use Getopt::Std;
my %opts;
getopts('dhp:q:sb:f:l:',\%opts) || &displayhelp;
if(defined($opts{'p'})) { $port    = $opts{'p'}; }
if(defined($opts{'p'})) { $sslport = $opts{'p'}; }
if(defined($opts{'b'})) { $backlog = $opts{'b'}; }
if(defined($opts{'s'})) { $ssl  = 1; }
if(defined($opts{'d'})) { $daemon  = 1; }
if(defined($opts{'f'})) { $conf    = $opts{'f'}; }
if(defined($opts{'h'})) { &displayhelp; }
undef %opts;

if($daemon) {
  exit if fork;
  $Utils::params{logfile}=$logfile;
  POSIX::setsid() || Utils::syslog('notice',"Cannot start a new session: $!");
}

my $tmp = LocalServer->new($conf);
Utils::servers()->{$tmp->name()} = $Utils::thisserver = $tmp;
$Utils::stats{highclients} = 0;
$Utils::stats{highconnections} = 0;

$SIG{'PIPE'} = 'IGNORE';

foreach my $tmpport ($port,@{ $tmp->{'ports'} }) {
    my $server = IO::Socket::INET->new(LocalPort => $tmpport,
				       Listen    => $backlog,
				       Reuse     => 1,
				       Proto     => 'tcp');
    if(!defined($server)) {
	# note that 5.004 Socket.pm's _error() spooges on $!, so we use $@ here
      Utils::syslog('err',"Failed to open listening socket on port $tmpport: $@");
	exit(-1);
    }
    $serversocks{$server} = $tmpport;
}

if($ssl) {
    require IO::Socket::SSL;

    foreach my $tmpport ($sslport,@{ $tmp->{'sslports'} }) {
	my $sslserver = IO::Socket::SSL->new(LocalPort => $tmpport,
					     Listen    => $backlog,
					     Reuse     => 1,
					     Proto     => 'tcp');
	if(!defined($sslserver)) {
	  Utils::syslog('err',"Failed to open SSL listening socket on port $tmpport: $@");
	    exit(-1);
	}
	$serversocks{$sslserver} = $tmpport;
    }
}

my $select    = IO::Select->new(keys %serversocks);
# While we key these on the $client's socket object, we
#  don't have to iterate over them in such as way that they
#  have to be RefHashes
my %inbuffer;
my %outbuffer;
my %timer;
tie %inbuffer, 'Tie::RefHash';
tie %timer, 'Tie::RefHash';

my($theline, $therest);

if(!$daemon) {
    print "Ripe and ready to the eye...\n";
}

for(;;) {
  my $client;
  my $time;

  foreach $client ($select->can_read(1)) {
    if($serversocks{$client}) {
      # Activity on the listening socket means we have a new
      # client attempting to connect.
      # Get ahold of the new socket, assign it to all the whatnot, etc
      $client = $client->accept;
      $select->add($client);
      &setnonblocking($client);
      $connections{$client} = Connection->new($client, \%outbuffer,
                                              $Utils::thisserver);
      $unfinished{$client}  = $connections{$client};
    } elsif(defined($connections{$client})) {
      # It is not the listening socket, so it is probably a client
      $time = time();
      $timer{$client} = $time if $timer{$client} < $time;
      my($data,$got);
      $got = $client->sysread($data,POSIX::BUFSIZ);
      unless(defined $got) {
	# Aww. We had an error reading from their socket, so we have
	#  to cut them loose.
	if($connections{$client}->isa("User")) {
	  my $user = $connections{$client};
	  $user->quit("Read error to ".$user->nick."[".$user->host."]");
	} elsif($connections{$client}->isa("Server")) {
	  $connections{$client}->squit();
	} else {
	  my $connection = $connections{$client};
	  $connection->quit();
	}
      }
      $inbuffer{$client} .= $data;
    } else {
      # We've got activity on a martian socket!
    }

    # if we got a whole line(s), process it
    while( ($timer{$client} - $Utils::thisserver->{'mechanics'}->{FLOODOFFLINES} <= $time) &&
	  (($theline, $therest)=$inbuffer{$client}=~/([^\n]*)\n(.*)/s)) {
      $inbuffer{$client}=$therest;
      # if the client used CRLF, strip the "\r"
      $theline=~s/\r$//;
      die("maybe not.") if(!defined($connections{$client}));
      $connections{$client}->handle($theline);
      $timer{$client}++;
    }

    if(length $inbuffer{$client} > $Utils::thisserver->{'mechanics'}->{FLOODOFFBYTES}) {
      $connections{$client}->quit("Flood");
    }
  }

  $time = time();

  # This stuff handles testing the connectivity of all the
  #  connections.
  foreach $client (keys %connections) {
      my $idle = $time - $connections{$client}->last_active();
      if(($idle>$Utils::thisserver->{'mechanics'}->{PINGCHECKTIME})&&
          (!$connections{$client}->ping_in_air())) {
	  # send anyone who's been idle too long a ping
	  $connections{$client}->ping();
      } elsif(($idle > $Utils::thisserver->{'mechanics'}->{PINGCHECKTIME} +
                       $Utils::thisserver->{'mechanics'}->{PINGOUTTIME}) &&
              ($connections{$client}->ping_in_air())) {
	  # if they don't respond, send them to hell
	  if($connections{$client}->isa("Server")) {
	      $connections{$client}->squit("Ping timeout");
	  } else {
	      $connections{$client}->quit("Ping timeout");
	  }
      }
  }

  # This checks for Connection objects that have finished
  # the little dance to connect. It turns them into Users or
  # Servers, cleans up the old mess, and puts the new object
  # in the right places.
 UNFINISHEDCHECK: foreach $client (keys %unfinished) {
    my $connection = $unfinished{$client};
    # Ask them if they're ready
    if($connection->readytofinalize()) {
      my $thing = $unfinished{$client}->finalize();
      unless(defined($thing)) {
	# finalization falled for some reason. state should be
	# okay, we just need to forget about $client
	&finishclient($client);
	delete($unfinished{$client});
	next UNFINISHEDCHECK;
      }
      if($thing->isa("User")) {
	# They've handed us a User object.
	my $nick = $thing->nick();
	Utils::users()->{$nick} = $thing;
	$connections{$client}   = $thing;
      } elsif($thing->isa("Server")) {
	# They've handed us a Server object.
	my $name = $thing->name();
	Utils::servers()->{$name} = $thing;
	$connections{$client}     = $thing;
      } else {
	# Wow. Martian finalization. Crazy Stuff.
      }
      delete($unfinished{$client});
    }
  }

  # Look to see which of our sockets can be written to at the moment
  foreach $client ($select->can_write(0)) {
    # Skip it if we don't have anything available to send it.
    next unless $outbuffer{$client};
    # Actually attempt to send some of the data.
    my $sent = $client->syswrite($outbuffer{$client},POSIX::BUFSIZ);
    if(!defined($sent)) { next; }
    # If we couldn't manage to send the whole thing, then trim what we
    #  did manage to send them out of the out-going buffer so we don't
    #  send it again.
    if(($sent<=length($outbuffer{$client}))||
       ($!   ==POSIX::EWOULDBLOCK)) {
      substr($outbuffer{$client},0,$sent) = '';
      if(!length($outbuffer{$client})) {
	delete($outbuffer{$client});
      }
    } else {
      # Uhh ohh. We couldn't write to their socket, so we cut them
      #  loose with a Write error signoff message.
      if($connections{$client}->isa("User")) {
	my $user = $connections{$client};
	$user->quit("Write error to ".$user->nick."[".$user->host."]");
      } elsif($connections{$client}->isa("Server")) {
	$connections{$client}->squit();
      } else {
	# Bleh. I'm too lazy to figure out what should be done about
	#  Connection objects. Probably just delete them.
      }
      next;
    }
  }

  my $count = $Utils::thisserver->users();
  $Utils::stats{highclients}=$count
    if $Utils::stats{highclients}<$count;
  $count = keys %connections;
  $Utils::stats{highconnections}=$count
    if $Utils::stats{highconnections}<$count;

  # Trim the history down to the most recent 32
  splice @Utils::nickhistory, 32; # you can up this for high traffic servers
}

END {
  foreach my $client (keys %connections) {
    &finishclient($client);
  }
}

sub addinitiatedclient {
  my $client = shift;
  my $send   = shift;

  $select->add($client);
  &setnonblocking($client);
  $connections{$client} = Connection->new($client,
					  \%outbuffer,
					  $Utils::thisserver);
  $unfinished{$client}  = $connections{$client};
  $connections{$client}->{'initiated'}=1;
  $connections{$client}->senddata($send);
}

sub finishclient {
  my $client = shift;
  my $thing  = $connections{$client};
  # Kill all the buffers, etc for the client.
  delete($outbuffer{$client});
  delete($inbuffer{$client});
  if($connections{$client} != undef && 
     $connections{$client}->isa("Connection")) {
    # We deal with Connections
    delete($unfinished{$client});
  }
  # Users and Servers have to take care of themselves, though
  delete($connections{$client});
  # Don't want to wait on the socket any more..
  $select->remove($client);
  # ..because we're closing it.
  close($client);
}

sub setnonblocking {
  my $sock = shift;
  # Get the current state of the socket..
  my $flags = fcntl($sock, F_GETFL, 0) or
    die "Can't get the flags on socket: $!\n";
  # ..and then add O_NONBLOCK (nonblocking-ness) on to it.
  fcntl($sock, F_SETFL, $flags | O_NONBLOCK) or
    die "Can't set socket non-blocking: $!\n";
}

sub displayhelp {
  print "Usage: pircd [OPTION]...
  -p                              Set default listening port   [$port]
  -q                              Set default SSL port         [$sslport]
  -s                              Enable SSL
  -b                              Set the max incoming backlog [$backlog]
  -f                              Server configuration file    [$conf]
  -d                              Fork and daemonize
  -h                              Display command line option help
  -l                              Logfile                      [$logfile]
";
  exit(1);
}
