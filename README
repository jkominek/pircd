                                  _                _ 
                           _ __  (_) _ __  ___  __| |
                          | '_ \ | || '__|/ __|/ _` |
                          | |_) || || |  | (__| (_| |  Alpha Eleven
                          | .__/ |_||_|   \___|\__,_|
    _   _                 |_|    _   _             _   
   | |_| |_  ___   _ __  ___ _ _| | (_)_ _ __   __| |__ _ ___ _ __  ___ _ _  
   |  _| ' \/ -_) | '_ \/ -_) '_| | | | '_/ _| / _` / _` / -_) '  \/ _ \ ' \ 
    \__|_||_\___| | .__/\___|_| |_| |_|_| \__| \__,_\__,_\___|_|_|_\___/_||_|
                  |_|                                                        
                                    by jay kominek (jay.kominek@colorado.edu)


 Yes.
 It really is an IRC daemon.
 Its written in Perl.
 ...
 You can breathe again.
 There. Very good.

*** Introduction

 pircd is an IRC daemon written in Perl. I wrote it after realizing that Perl
is the right language for IRC. IRC is chock full of various strings and other
what not, all of which is easily parsed by Perl, where the C IRC daemons jump
through all kinds of hoops and have really nasty looking code (have you ever
looked at the Undernet IRC daemon? I gave up on trying to figure out how their
extensions to the protocol work by looking at the code.) Whereas pircd is, in
my opinion, very clean. Messages from the user are dispatched to the
appropriate code via a lookup table to subroutine references, no excessively
large if..elsif..else structure, no conversion of the strings into something
that they are not (numeric values, if I remember how ircu does it).

 pircd is now reasonably complete. It lacks nick history, commands based upon
nick history, /STATS output that has any relation to reality, interserver
communication, and a few finishing touches. As of this writing, it is 3115
lines long (counting comments and everything). I do not anticipate it getting
past twice that with the addition of the remaining features. (interserver
communication being the big one.)

 If you would like to know more about how pircd operates internally, please
consult the included file, 'INTERNALS'.

*** Requirements

 * Perl 5.004 (I suppose 5.005 will work, but I have not tested it)
 * The following Perl modules:
    Fcntl, Getopt::Long, IO::Select, IO::Socket,
    POSIX, Sys::Syslog, Tie::RefHash, UNIVERSAL
     In the future, I may make use of Compress::Zlib, however
     I imagine its use will be optional.
 * A computer
 * A port that you can bind to, preferably 6667

*** About the author

 I am studying Electrical and Computer Engineering at the University of
Colorado, Boulder. I used to be available for contract programming work,
but I got a job.

- Jay Kominek <jay.kominek@colorado.edu>
  Hail Eris!
